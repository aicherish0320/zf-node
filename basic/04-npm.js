// node package management
// 第三方模块 需要通过 npm install 来安装
// 第三方模块分为两种，全局模块 本地模块
// 全局模块只能通过 npm install -g 来安装的是全局模块，安装后只能在命令行中使用
// npm root -g 查看安装的位置

// npm 在我们当前的 path 环境变量中，可以直接在命令行中执行

// 全局安装后只能在命令行中使用

// 我们希望自己编写一个全局包
// 1. 初始化包的信息 npm init -y，可以初始化一系列信息
// 2. 定义一个运行入口，bin 一般表示存放的都是可执行文件
// 3. 配置命令，执行对应的脚本
// 4. 将包临时放置到全局

// npm i ac-npm-module -g
// ac-npm-module

// 代码中的依赖
// 开发依赖 devDependencies，只在开发中使用
// 生产依赖 dependencies，开发生成中都是用
// 同等依赖 peerDependencies ，我开发的项目中，需要依赖一个XX版本
// 可选依赖
// 打包依赖

// 如果两个库中依赖了不同版本的内容会共存，但是一般在开发的时候我们会采用高版本，盖掉低版本

// 默认安装后会生成一个 package-lock.json，锁定版本的文件（为了保证我安装的版本和你的版本一致）
// 1.2.3 (major.minor.patch)

// 版本号
//  ^5.0.0 当前这个大版本只能是5，后面可以比当前版本更高
// ~5.2.0 前两位只能是5.2，后面只要比当前大就行
//  >=
// <=

// 执行命令的问题，有一些模块并不会安装到全局下
// webpack
// 当我们运行 npm run 命令的时候，会将当前项目下的 node_modules/.bin 文件夹放在全局下，但是执行完毕后就销毁了
// npx 如果包不存在会安装，执行后就销毁，同时也会将 node_modules/bing 目录放到全局下
// 一般情况下会用 npm run ，因为 npm run 可以写到配置文件中
